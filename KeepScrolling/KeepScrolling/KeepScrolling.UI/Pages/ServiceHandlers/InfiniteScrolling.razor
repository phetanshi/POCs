@using System.Threading
@using Microsoft.JSInterop
@typeparam T
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@namespace Meziantou.AspNetCore.Components

@foreach (var item in _items)
{
    @if (ItemTemplate != null)
    {
        @ItemTemplate(item)
    }
}
@if (_loading)
{
    @LoadingTemplate
}

<div @ref="_lastItemIndicator" style="height:1px"></div>

@code {
    private List<T> _items = new();
    private ElementReference _lastItemIndicator;
    private DotNetObjectReference<InfiniteScrolling<T>>? _currentComponentReference;
    private IJSObjectReference? _module;
    private IJSObjectReference? _instance;
    private bool _loading = false;
    private CancellationTokenSource? _loadItemsCts;
    private InfiniteScrollingItemsProviderRequestDelegate<T>? _itemsProvider;

    [Parameter]
    public InfiniteScrollingItemsProviderRequestDelegate<T>? ItemsProvider { get; set; }

    [Parameter]
    public RenderFragment<T>? ItemTemplate { get; set; }

    [Parameter]
    public RenderFragment? LoadingTemplate { get; set; }

    [JSInvokable]
    public async Task LoadMoreItems()
    {
        if (_loadItemsCts != null)
            return;

        if (ItemsProvider == null)
            return;

        var items = _items;
        var cts = new CancellationTokenSource();
        _loadItemsCts = cts;
        try
        {
            StateHasChanged(); // Allow the UI to display the loading indicator
            try
            {
                var newItems = await ItemsProvider(new InfiniteScrollingItemsProviderRequest(items.Count, cts.Token));
                if (!cts.IsCancellationRequested)
                {
                    items.AddRange(newItems);

                    System.Diagnostics.Debug.Assert(_instance != null);
                    await _instance.InvokeVoidAsync("onNewItems");
                }
            }
            catch (OperationCanceledException oce) when (oce.CancellationToken == cts.Token)
            {
                // No-op; we canceled the operation, so it's fine to suppress this exception.
            }
        }
        finally
        {
            _loadItemsCts = null;
            cts.Dispose();
        }

        StateHasChanged(); // Display the new items and hide the loading indicator
    }

    public async Task RefreshDataAsync()
    {
        _loadItemsCts?.Cancel(); // Will be disposed by the LoadMoreData method
        _loadItemsCts = null;

        _items = new List<T>();
        await LoadMoreItems();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        // Clear items when the provider changed
        if (ItemsProvider != _itemsProvider)
        {
            _items.Clear();
        }

        _itemsProvider = ItemsProvider;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Initialize the IntersectionObserver
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/infinite-scrolling.js");
            _currentComponentReference = DotNetObjectReference.Create(this);
            _instance = await _module.InvokeAsync<IJSObjectReference>("initialize", _lastItemIndicator, _currentComponentReference);
        }
    }

    public async ValueTask DisposeAsync()
    {
        // Cancel the current load items operation
        if (_loadItemsCts != null)
        {
            _loadItemsCts.Dispose();
            _loadItemsCts = null;
        }

        // Stop the IntersectionObserver
        if (_instance != null)
        {
            await _instance.InvokeVoidAsync("dispose");
            await _instance.DisposeAsync();
            _instance = null;
        }

        if (_module != null)
        {
            await _module.DisposeAsync();
        }

        _currentComponentReference?.Dispose();
    }
}